# Route: Place an order
@app.route('/orders', methods=['POST'])
def create_order():
    """
    Create a new order and trigger a notification to the farmer.
    """
    try:
        data = request.get_json()
        user_id = data['user_id']
        animal_id = data['animal_id']
        quantity = data['quantity']
        order_id = f"ORD-{datetime.now().strftime('%Y%m%d%H%M%S')}"  # Unique order ID
        status = 'initiated'
        
        # Create a new order
        order = Order(
            user_id=user_id,
            animal_id=animal_id,
            order_id=order_id,
            quantity=quantity,
            status=status,
            created_at=datetime.now()
        )
        db.session.add(order)
        db.session.commit()

        # Get farmer ID from the animal
        animal = Animal.query.filter_by(id=animal_id).first()
        if not animal:
            return jsonify({"error": "Animal not found"}), 404

        farmer_id = animal.farmer_id

        # Create a notification for the farmer
        notification = Notification(
            farmer_id=farmer_id,
            message=f"New order {order_id} for your animal {animal_id} has been placed.",
            status="unread",
            created_at=datetime.now()
        )
        db.session.add(notification)
        db.session.commit()

        return jsonify({
            "message": "Order placed successfully.",
            "order_id": order_id
        }), 201

    except SQLAlchemyError as e:
        db.session.rollback()
        return jsonify({"error": str(e)}), 500


# Route: Farmer responds to an order notification
@app.route('/notifications/<int:notification_id>/response', methods=['PATCH'])
def respond_to_notification(notification_id):
    """
    Farmer can accept or decline an order notification.
    """
    try:
        data = request.get_json()
        response = data.get('response')  # Expected values: "accepted" or "declined"

        # Validate response
        if response not in ['accepted', 'declined']:
            return jsonify({"error": "Invalid response value. Must be 'accepted' or 'declined'."}), 400

        # Find the notification
        notification = Notification.query.filter_by(id=notification_id).first()
        if not notification:
            return jsonify({"error": "Notification not found"}), 404

        # Update notification status
        notification.status = 'read'
        db.session.add(notification)

        # Update the corresponding order status
        order = Order.query.filter_by(order_id=notification.order_id).first()
        if not order:
            return jsonify({"error": "Order not found"}), 404

        order.status = 'payment_success' if response == 'accepted' else 'payment_failed'
        db.session.add(order)
        db.session.commit()

        return jsonify({
            "message": f"Order {order.order_id} has been {response}."
        }), 200

    except SQLAlchemyError as e:
        db.session.rollback()
        return jsonify({"error": str(e)}), 500


# Route: Get notifications for a farmer
@app.route('/farmers/<int:farmer_id>/notifications', methods=['GET'])
def get_farmer_notifications(farmer_id):
    """
    Retrieve all notifications for a specific farmer.
    """
    try:
        notifications = Notification.query.filter_by(farmer_id=farmer_id).all()
        if not notifications:
            return jsonify({"message": "No notifications found."}), 404

        return jsonify([
            {
                "id": notification.id,
                "message": notification.message,
                "status": notification.status,
                "created_at": notification.created_at
            } for notification in notifications
        ]), 200

    except SQLAlchemyError as e:
        return jsonify({"error": str(e)}), 500


# Route: Get all orders for a user
@app.route('/users/<int:user_id>/orders', methods=['GET'])
def get_user_orders(user_id):
    """
    Retrieve all orders placed by a specific user.
    """
    try:
        orders = Order.query.filter_by(user_id=user_id).all()
        if not orders:
            return jsonify({"message": "No orders found."}), 404

        return jsonify([
            {
                "order_id": order.order_id,
                "animal_id": order.animal_id,
                "quantity": order.quantity,
                "status": order.status,
                "created_at": order.created_at
            } for order in orders
        ]), 200

    except SQLAlchemyError as e:
        return jsonify({"error": str(e)}), 500